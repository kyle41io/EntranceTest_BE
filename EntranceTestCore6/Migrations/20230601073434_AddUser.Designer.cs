// <auto-generated />
using System;
using EntranceTestCore6.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EntranceTestCore6.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230601073434_AddUser")]
    partial class AddUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EntranceTestCore6.Data.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MemberId"));

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("MemberName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<DateTime>("SignUpDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int>("TestAmount")
                        .HasColumnType("integer");

                    b.HasKey("MemberId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("EntranceTestCore6.Data.QuestionList", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("QuestionId"));

                    b.Property<string>("Answer1")
                        .HasColumnType("text");

                    b.Property<string>("Answer2")
                        .HasColumnType("text");

                    b.Property<string>("Answer3")
                        .HasColumnType("text");

                    b.Property<string>("Answer4")
                        .HasColumnType("text");

                    b.Property<int>("CorrectAnswer")
                        .HasColumnType("integer");

                    b.Property<string>("Question")
                        .HasColumnType("text");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<string>("TestName")
                        .HasColumnType("text");

                    b.HasKey("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("QuestionLists");
                });

            modelBuilder.Entity("EntranceTestCore6.Data.TestAttemptList", b =>
                {
                    b.Property<int>("AttemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AttemptId"));

                    b.Property<double>("Accurate")
                        .HasColumnType("double precision");

                    b.Property<int>("AmountCorrect")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFinish")
                        .HasColumnType("boolean");

                    b.Property<int>("MemberId")
                        .HasColumnType("integer");

                    b.Property<int>("TestAmount")
                        .HasColumnType("integer");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<string>("TestName")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("AttemptId");

                    b.HasIndex("MemberId");

                    b.HasIndex("TestId");

                    b.ToTable("TestAttemptLists");
                });

            modelBuilder.Entity("EntranceTestCore6.Data.TestList", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TestId"));

                    b.Property<int>("QuestionAmount")
                        .HasColumnType("integer");

                    b.Property<string>("TestDesc")
                        .HasColumnType("text");

                    b.Property<string>("TestName")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("TestTime")
                        .HasColumnType("interval");

                    b.HasKey("TestId");

                    b.ToTable("TestLists");
                });

            modelBuilder.Entity("EntranceTestCore6.Data.TestQuestionAttemptList", b =>
                {
                    b.Property<int>("AttemptQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AttemptQuestionId"));

                    b.Property<int>("AttemptId")
                        .HasColumnType("integer");

                    b.Property<int>("Chose")
                        .HasColumnType("integer");

                    b.Property<int>("CorrectAnswer")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("AttemptQuestionId");

                    b.HasIndex("AttemptId");

                    b.HasIndex("QuestionId");

                    b.ToTable("TestQuestionAttemptLists");
                });

            modelBuilder.Entity("EntranceTestCore6.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("UserPassword")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EntranceTestCore6.Data.QuestionList", b =>
                {
                    b.HasOne("EntranceTestCore6.Data.TestList", "TestList")
                        .WithMany("QuestionLists")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestList");
                });

            modelBuilder.Entity("EntranceTestCore6.Data.TestAttemptList", b =>
                {
                    b.HasOne("EntranceTestCore6.Data.Member", "Member")
                        .WithMany("TestAttemptLists")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntranceTestCore6.Data.TestList", "TestList")
                        .WithMany("TestAttemptLists")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("TestList");
                });

            modelBuilder.Entity("EntranceTestCore6.Data.TestQuestionAttemptList", b =>
                {
                    b.HasOne("EntranceTestCore6.Data.TestAttemptList", "TestAttemptList")
                        .WithMany("TestQuestionAttemptLists")
                        .HasForeignKey("AttemptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntranceTestCore6.Data.QuestionList", "QuestionList")
                        .WithMany("TestQuestionAttemptLists")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionList");

                    b.Navigation("TestAttemptList");
                });

            modelBuilder.Entity("EntranceTestCore6.Data.Member", b =>
                {
                    b.Navigation("TestAttemptLists");
                });

            modelBuilder.Entity("EntranceTestCore6.Data.QuestionList", b =>
                {
                    b.Navigation("TestQuestionAttemptLists");
                });

            modelBuilder.Entity("EntranceTestCore6.Data.TestAttemptList", b =>
                {
                    b.Navigation("TestQuestionAttemptLists");
                });

            modelBuilder.Entity("EntranceTestCore6.Data.TestList", b =>
                {
                    b.Navigation("QuestionLists");

                    b.Navigation("TestAttemptLists");
                });
#pragma warning restore 612, 618
        }
    }
}
